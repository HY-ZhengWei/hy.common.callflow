<?xml version="1.0" encoding="UTF-8"?>

<config>

    <import name="xconfig"    class="java.util.ArrayList" />
    <import name="xmt"        class="org.hy.common.callflow.nesting.MTConfig" />
    <import name="xnesting"   class="org.hy.common.callflow.nesting.NestingConfig" />
    <import name="xfor"       class="org.hy.common.callflow.forloop.ForConfig" />
    <import name="xcondition" class="org.hy.common.callflow.ifelse.ConditionConfig" />
    <import name="xreturn"    class="org.hy.common.callflow.returns.ReturnConfig" />
    <import name="xcg"        class="org.hy.common.callflow.cache.CacheGetConfig" />
    <import name="xcs"        class="org.hy.common.callflow.cache.CacheSetConfig" />
    <import name="xcalculate" class="org.hy.common.callflow.node.CalculateConfig" />
    <import name="xwait"      class="org.hy.common.callflow.node.WaitConfig" />
    <import name="xnode"      class="org.hy.common.callflow.node.NodeConfig" />
    <import name="xapi"       class="org.hy.common.callflow.node.APIConfig" />
    <import name="xsql"       class="org.hy.common.callflow.node.XSQLConfig" />
    <import name="xcommand"   class="org.hy.common.callflow.node.CommandConfig" />
    <import name="xzip"       class="org.hy.common.callflow.node.ZipConfig" />
    <import name="xunzip"     class="org.hy.common.callflow.node.UnzipConfig" />
    <import name="xpublish"   class="org.hy.common.callflow.event.PublishConfig" />
    <import name="xsubscribe" class="org.hy.common.callflow.event.SubscribeConfig" />
    <import name="xwspush"    class="org.hy.common.callflow.event.WSPushConfig" />
    <import name="xwspull"    class="org.hy.common.callflow.event.WSPullConfig" />
    <import name="xjob"       class="org.hy.common.callflow.event.JOBConfig" />
    
    
    
    <!-- CFlow编排引擎配置 -->
    <xconfig>
    
        <xnode id="XWait_CF018_B_1_1">
            <comment>显示等待秒数</comment>
            <callXID>:XProgram</callXID>                    <!-- 定义执行对象 -->
            <callMethod>method_ShowWaitTime</callMethod>    <!-- 定义执行方法 -->
            <callParam>
                <valueClass>java.lang.Long</valueClass>     <!-- 定义入参类型 -->
                <value>:XWait_CF018_B_1.waitTime</value>    <!-- 定义入参变量名称 -->
            </callParam>
            <callParam>
                <valueClass>java.lang.String</valueClass>
                <value>:typeName</value>                    <!-- 相同变量名称，不同值 -->
            </callParam>
        </xnode>
        
    
        <xwait id="XWait_CF018_B_1">
            <comment>等待5秒</comment>
            <waitTime>5000</waitTime>                       <!-- 等待时长（单位：毫秒） -->
            <route>
                <if>
                    <next ref="XWait_CF018_B_1_1" />
                    <comment>等待5秒后执行下一步</comment>
                </if>
            </route>
        </xwait>
        
        
        <xnode id="XWait_CF018_A_1_1">
            <comment>显示等待秒数</comment>
            <callXID>:XProgram</callXID>                    <!-- 定义执行对象 -->
            <callMethod>method_ShowWaitTime</callMethod>    <!-- 定义执行方法 -->
            <callParam>
                <valueClass>java.lang.Long</valueClass>     <!-- 定义入参类型 -->
                <value>:XWait_CF018_A_1.waitTime</value>    <!-- 定义入参变量名称 -->
            </callParam>
            <callParam>
                <valueClass>java.lang.String</valueClass>
                <value>:typeName</value>                    <!-- 相同变量名称，不同值 -->
            </callParam>
        </xnode>
        
        
        <xwait id="XWait_CF018_A_1">
            <comment>等待3秒</comment>
            <waitTime>3000</waitTime>                       <!-- 等待时长（单位：毫秒） -->
            <route>
                <if>
                    <next ref="XWait_CF018_A_1_1" />
                    <comment>等待3秒后执行下一步</comment>
                </if>
            </route>
        </xwait>
        
        
        <xreturn id="XReturn_CF018_1_1_1">
            <comment>对外返回并发结果</comment>
            <retClass>java.util.HashMap</retClass>          <!-- 定义返回值的类型 -->
            <retValue>
            {
                "typeNameA": ":AReturn", 
                "typeNameB": ":BReturn"
            }
            </retValue>                                     <!-- 从每路并发项的返回值中取值，组合成一个新的数据格式统一返回 -->
        </xreturn>
        
        
        <xnode id="XNode_CF018_1_1">
            <comment>并发整体完成</comment>
            <callXID>:XProgram</callXID>                    <!-- 定义执行对象 -->
            <callMethod>method_Finish</callMethod>          <!-- 定义执行方法 -->
            <route>
                <succeed>                                   <!-- 成功时，关联后置节点 -->
                    <next ref="XReturn_CF018_1_1_1" />
                    <comment>成功时</comment>
                </succeed>
            </route>
        </xnode>
        
        
        <xmt id="XMT_CF018_1">
            <comment>并发两种</comment>
            <item>
                <comment>并发项：模拟等待3秒</comment>
                <callFlowXID>:XWait_CF018_A_1</callFlowXID>
                <context>
                {
                    "typeName": ":typeNameA"
                }
                </context>
                <returnID>AReturn</returnID>
            </item>
            <item>
                <comment>并发项：模拟等待5秒</comment>
                <callFlowXID>:XWait_CF018_B_1</callFlowXID>
                <context>
                {
                    "typeName": ":typeNameB"
                }
                </context>
                <returnID>BReturn</returnID>
            </item>
            <route>
                <succeed>                                   <!-- 成功时，关联后置节点 -->
                    <next ref="XNode_CF018_1_1" />
                    <comment>成功时</comment>
                </succeed>
            </route>
        </xmt>
        
    </xconfig>
    
</config>